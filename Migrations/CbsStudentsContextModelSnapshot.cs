// <auto-generated />
using System;
using CbsStudents.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CbsStudents.Migrations
{
    [DbContext(typeof(CbsStudentsContext))]
    partial class CbsStudentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("CbsStudents.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1192),
                            PostId = 1,
                            Text = "First POGGERS",
                            UserId = "1"
                        },
                        new
                        {
                            CommentId = 2,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1196),
                            PostId = 1,
                            Text = "Second Sadge",
                            UserId = "2"
                        },
                        new
                        {
                            CommentId = 3,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1198),
                            PostId = 2,
                            Text = "First GigaChad",
                            UserId = "1"
                        },
                        new
                        {
                            CommentId = 4,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1201),
                            PostId = 1,
                            Text = "So many comments",
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Description = "Ses på grillen, det bliver super fedt",
                            EndTime = new DateTime(2022, 7, 5, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Grillen",
                            StartTime = new DateTime(2022, 7, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Grillfest",
                            UserId = "1"
                        },
                        new
                        {
                            EventId = 2,
                            Description = "Vi spiller brætspil",
                            EndTime = new DateTime(2022, 6, 18, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Brætspilscafeen",
                            StartTime = new DateTime(2022, 6, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Brætspilshygge",
                            UserId = "2"
                        },
                        new
                        {
                            EventId = 3,
                            Description = "Lad os studere ASP.NET sammen",
                            EndTime = new DateTime(2022, 5, 30, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Hjemme hos mig",
                            StartTime = new DateTime(2022, 5, 30, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Studieaften",
                            UserId = "1"
                        },
                        new
                        {
                            EventId = 4,
                            Description = "Der skal drikkes bajer",
                            Location = "Guldbar",
                            StartTime = new DateTime(2022, 5, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Guldbar fest",
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParticipantId");

                    b.HasIndex("EventId");

                    b.ToTable("Participant");

                    b.HasData(
                        new
                        {
                            ParticipantId = 1,
                            EventId = 1,
                            Name = "Rasmus Roth"
                        },
                        new
                        {
                            ParticipantId = 2,
                            EventId = 1,
                            Name = "Janus Pedersen"
                        },
                        new
                        {
                            ParticipantId = 3,
                            EventId = 1,
                            Name = "Barack Obama"
                        },
                        new
                        {
                            ParticipantId = 4,
                            EventId = 2,
                            Name = "Rasmus Roth"
                        },
                        new
                        {
                            ParticipantId = 5,
                            EventId = 2,
                            Name = "Janus Pedersen"
                        },
                        new
                        {
                            ParticipantId = 6,
                            EventId = 3,
                            Name = "Rasmus Roth"
                        },
                        new
                        {
                            ParticipantId = 7,
                            EventId = 4,
                            Name = "Rasmus Roth"
                        });
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1137),
                            Status = 0,
                            Text = "This is the seeded post 1",
                            Title = "Post number 1",
                            UserId = "1"
                        },
                        new
                        {
                            PostId = 2,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1173),
                            Status = 0,
                            Text = "This is the seeded post 2",
                            Title = "Post number 2",
                            UserId = "1"
                        },
                        new
                        {
                            PostId = 3,
                            Created = new DateTime(2022, 6, 1, 22, 29, 55, 779, DateTimeKind.Local).AddTicks(1175),
                            Status = 0,
                            Text = "This is the seeded post 3",
                            Title = "Post number 3",
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2021de6-ad48-4d6b-a327-91567526af82",
                            Email = "rasm05n1@stud.kea.dk",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RASM05N1@STUD.KEA.DK",
                            NormalizedUserName = "RASM05N1@STUD.KEA.DK",
                            PasswordHash = "AQAAAAEAACcQAAAAEKg/kTFXl4oR787TwsYRIqi/NWhx8TGnRJ+/Zr3wV7c3RKc7CXcbmMPgwqp0SvXwMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c81a5d3-bbb9-4baa-a4f0-96520100ccb4",
                            TwoFactorEnabled = false,
                            UserName = "rasm05n1@stud.kea.dk"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a005aae2-a1ba-4242-aed3-8a6ebb420911",
                            Email = "test@kea.dk",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@KEA.DK",
                            NormalizedUserName = "TEST@KEA.DK",
                            PasswordHash = "AQAAAAEAACcQAAAAEJqPqK4MXcMP+nwttQ2PvGhcMBouyx27bQqgrtj/djEgDpaym3rb94jDlXGlbyWMnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cfe784fe-9d82-462c-af44-924d84680ca1",
                            TwoFactorEnabled = false,
                            UserName = "test@kea.dk"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Comment", b =>
                {
                    b.HasOne("CbsStudents.Models.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Event", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Participant", b =>
                {
                    b.HasOne("CbsStudents.Models.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Post", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("CbsStudents.Models.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
